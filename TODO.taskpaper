ogtranslate:
	see ./ogrtrans/README.md for documentation
	Preparation:
		- clean up the documentation about ogtrans @estimate(30min) @done
		- test if PO files containing MD can be properly translated in crowdin @done
		- decide on how to save files, and how translations will be injected @estimate(1h) @done
		- write a simple command that dumps contents of a full file as markdown @estimate(30min) @done
	Cleanup:
		- create a proper python package for ogtrans @estimate(1h) @done
	rtf2md:
		- can't find all text through XML, test plist parser @done
		- write a more robust extractor for RTF that better identifies the actual text @done
		- pick up all the usecases in the illustrations that are currently not supported @estimate(1h) @later
		- fix all the usecases in the rtf2markdown converter @estimate(4h) @later
		- check other bullet types @later
		- check for nested lists?? @later
		- process special characters (like  ➤) @later
		- encode/decode unicode characters @later
		- bold/regular/italics using OpenSans @later
	Translation workflow:
		- extract filename form user data @na
		- add markdown to translation memory @na
		- dump markdown to file if filename is present @na
		- set fixed length if present in userdata (see if that is possible in PO files!!)
		- create meaningful context information
	
	Implementation for Illustration:
	- implement extractor @estimate(4h)
	- implement injector @estimate(4h)
	- make a full test run with illustrations and fix all problems @estimate(4h)
	Extending the usecase: @later
		- make test run with posters @estimate(30min)
		- make a test run with the primer @estimate(30min)
		- meke a plan how to fix what is still broken @estimate(30min)
	Nice to have:
		- research how to upload images to crowdin

ogexport (JXA):
	- write a small parser for commandline arguments and store them in associative array @done
	✔ finish basic export for PNG @done (19-03-15 11:39)
	- makefile: link ogexport script to /usr/local/bin/ogexport
	- save and restore current export settings if necessary
	- check old python code for additional behaviour and extend list of additional features
	- introduce delay before closing documents as workaround for export bug
	Sandboxing:
		https://developer.apple.com/library/archive/qa/qa1888/_index.html#//apple_ref/doc/uid/DTS40015156
		- get rid of the error that does not allow opening of files from scripts by wrapping filenames in Path()
	additional features:
		- create and open a copy of the document (otherwise OmniGraffle might change it)
		- export just one canvas (by name)

other tools: @later
	known problems:
		- can't access shared layers from JXA (is being fixed)
		- export is broken, OmniGroup support is investigating this (being fixed)
		- accessing ids of items in the document (e.g. via doc.canvases[0].layers[0].graphics[0].id()) prevents the script from accessing all elements (need to raise this with OG support)
			- raise id() problem with OmniGraffle support
		- unclear if updating attribute runs in JXA is working
	proj§ect setup:
		- consider making this a proper npm project with browserify (otherwise continued development will become a horrible mid-nineties experience) or node-jxa
	ogtools:
		What I need mostly is changing colors (and fonts), but maybe it's the simplest way doing this and ogtranslate with a generic document parser and plugins??

