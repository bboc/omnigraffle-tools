create a separate Github Project:
	- create & clone a new repo @done
	- set up branches (develoment at least) and git flow @done
	- make a project for Sublime Text with eslint etc. @done
	- copy all JXA files from here to there @done
	- remove JXA files from other repo @done
	- copy all relevant documentation from ogtool repo @done
	- move all JXA related info from this document to a separate readme-file (markdown!) @done
known problems:
	- can't access shared layers from JXA
	- export is broken, OmniGroup support is investigatign this, might be related to shared layers problem
	- accessing ids of items in the document (e.g. via doc.canvases[0].layers[0].graphics[0].id()) prevents the script from accessing all elements (need to raise this with OG support)
		- raise id() problem with OmniGraffle support
ogexport (JXA):
	- write a small parser for commandline arguments and store them in associative array @done
	âœ” finish basic export for PNG @done (19-03-15 11:39)
	- makefile: link ogexport script to /usr/local/bin/ogexport
	- save and restore current export settings if necessary
	- check old python code for additional behaviour and extend list of additional features
	additional features:
		- create and open a copy of the document (otherwise OmniGraffle might change it)
		- export just one canvas (by name)
project setup:
	- consider making this a proper npm project with browserify (otherwise continued development will become a horrible mid-nineties experience)

ogtranslate:
	Consider a mix of JXA (for interaction with the OmniGraffle documents) and python (for preparing a JSON file and invoking the JXA script). Or make it a NPM project and use what's out there

ogtools:
	What I need mostly is changing colors (and fonts), but maybe it's the simplest way doing this and ogtranslate with a generic document parser and plugins??

Sandboxing:
	https://developer.apple.com/library/archive/qa/qa1888/_index.html#//apple_ref/doc/uid/DTS40015156
	- get rid of the error that does not allow opening of files from scripts

