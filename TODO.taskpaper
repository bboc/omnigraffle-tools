ogtranslate:
	see ./ogrtrans/README.md for documentation
	see ./ogtrans/TODO.taskpaper for TODOs
ogexport (JXA):
	- write a small parser for commandline arguments and store them in associative array @done
	✔ finish basic export for PNG @done (19-03-15 11:39)
	- makefile: link ogexport script to /usr/local/bin/ogexport
	- save and restore current export settings if necessary
	- check old python code for additional behaviour and extend list of additional features
	- introduce delay before closing documents as workaround for export bug
	Sandboxing:
		https://developer.apple.com/library/archive/qa/qa1888/_index.html#//apple_ref/doc/uid/DTS40015156
		- get rid of the error that does not allow opening of files from scripts by wrapping filenames in Path()
	additional features:
		- create and open a copy of the document (otherwise OmniGraffle might change it)
		- export just one canvas (by name)

other tools: @later
	known problems:
		- can't access shared layers from JXA (is being fixed)
		- export is broken, OmniGroup support is investigating this (being fixed)
		- accessing ids of items in the document (e.g. via doc.canvases[0].layers[0].graphics[0].id()) prevents the script from accessing all elements (need to raise this with OG support)
			- raise id() problem with OmniGraffle support
		- unclear if updating attribute runs in JXA is working
	proj§ect setup:
		- consider making this a proper npm project with browserify (otherwise continued development will become a horrible mid-nineties experience) or node-jxa
	ogtools:
		What I need mostly is changing colors (and fonts), but maybe it's the simplest way doing this and ogtranslate with a generic document parser and plugins??

